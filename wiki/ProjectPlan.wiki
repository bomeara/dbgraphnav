#summary Detailed and overview timelines.

= Detailed Plan =


Prior to May 25
  * Get dev tools running on my laptop
    * Install php/apache/Postgres/graphviz
      * Import data and schema from treetapper
    * set up Emacs to handle php files
    * learn how to use svn


May 25-31

  * focus on design document
    * Write a clean above the line view
    * Start on below the line view
    * Design user interface for building extensible queries
      * How do users indicate interconnected data?
    * What embedding options should be offered and how do they work?
      * iframe?
      * ajax?
      * image + map?
    * Begin documenting software requirements
      * php5+
      * supported DB systems
    * Think about DB security.
  * Research DB abstraction layers for php
    * Is ADOdb the right one?
    * are there newer ones?
    * learn about the chosen one
  * User Survey

June 1-7

  * Design
    * Figure out how to limit the quantity of data retrieved
      * how do we deal with an over-connected node?
        * Should this be user configurable?
    * Think about how best to manage multi-server setups, start documenting this
    * Continue fleshing out below the line view
    * Document choices regarding caching of results, and keeping the cache within a specified size
    * Integration and callback
      * How does the person installing my application get the info back to their application?
      * How is this configured?
      * Will integrators pass their own data through my code, or will it get passed externally?
    * Milestone: Answers to the above questions
  * Figure out how best to make php interact with Graphviz
    * How best to pass the dot file to Graphviz?
    * Should I be piping the file results directly to php?
    * saving them to disk and then reading them?
    * Start figuring out how result caching is going to work
      * Write to file or to DB?
      * Does php write the file?
      * Does graphviz write it?
      * How is it named for easy later retrieval?
    * Milestone: Work out example code for whatever I decide is the best method for interaction
    * Create small test app to test and debug this connection
  * Create working config interface
    * XML config file
    * Read into array
    * PHP "converter" to transform XML -> static php file

June 8-14

  * Design
    * Write pseudo instructions for integrators
    * Finish any holes in the design document
    * Clean the Design Document up, double check consistency throughout
    * Milestone: Tentative design doc completion / approval
  * Begin work on PHP application framework
    * Request handling
    * Database connection
    * database interaction abstractions
  * Begin core application
    * Implement simple integrator interface (probably php config file at this stage)
    * Get SQL queries returning correct data
    * Implement SQL query limiting solution
    * Begin work on mapping result relationships

June 15-21

  * Object classes for result relationship mapping
  * Work on query pruning algorithm
  * Finish SQL result relationship mapping code
  * Make sure that results are smoothly transitioning into the result object as designed

June 22-28

  * Write result object -> dot file
  * Write code to implement caching strategy	
  * Write production code for integrating php and Graphviz
  * Implement necessary server-callback configuration for users


June 29-July 5

  * Write result object -> dot file
  * Dot to image
  * First version of parameter interaction
  * Move hardcoded parameters into config file

July 6-12

  * Continue to clean up hardcoding vs. config file
  * clickable image maps
  * callback urls in code and config file

----
(The future is below this line)

July 13-19

  * Fix Base Node problem
  * Continue image maps/callback urls
  * implement code to make the results visible within an iframe (*milestone: first true integration point*)
  * Fix what's broken
  * implement "collapse node" mode
  * Evaluate next features

July 20-26

  * Work on cache
  * Write formal integration guidelines and interface specifications
  * Bugtesting
  * Integration testing
  * Code cleanup
  * Filling in the cracks, taking stuff from the "cobbled together with ductape" stage to "cleanly functional"


July 27-August 2
  * Implement "next features"
  * Work with implementors to get it functional

August 2-9
  * Code cleanup
  * Further features
  * Clean up documentation

August 9+
  * Continue bug fixes
  * Code cleanup
  * Documentation

= Overview =

-May 26-
Concentrate on design document. Work on solving the the hard problems. (extensibility, limiting the amount of data retrieved, how to handle where links go, how to handle embedding, what configuration options are appropriate?)
Begin coding project framework (basic SQL connections, http interface, etc.).
Get comfortable with coding and working with each of the relevant tools.

-June 9-
Get design doc approval, or develop specific plan to finish areas that still need work.
Start coding core application.

-July 7-
SQL data selection/limitation functional (http requests retrieve the appropriate data from the DB)
Demonstrable progress toward key areas of core functionality:
SQL results->dot file
dot file-> graphic/imagemap
Followup URL generation working properly (i.e. clicking an image actually takes the user to the appropriate next node)
Correct External app URL retrieval (the app interacts correctly with the application it is being used within)

-July 28-
Tentative core project completion date. This includes security against SQL injection attacks.
Begin work on extra non-core features such as the following:
Build AJAX mouseover etc. breakout control code
Write further documentation on modification of the appropriate SQL statements to customize the project for other databases
Improve efficiency/response time, using techniques such as caching and predictive lookup
Design and implement database templating system
Develop working examples for database other frameworks such as CakePHP or BioSQL
Document and implement necessary changes for moving image generation to a different server for first order load balancing
Further configurable options (i.e. links to graphs with more nodes, easy filtering of the data types returned, etc.)

-August 11-
Stop active development of new features.
Finish any in-progress features.
Bug-test, complete documentation.
Work with any initial deployments to improve quality of integration.