#summary This is the core Design Document for the project.

= Introduction =

This document contains both a project overview and specific information regarding how each aspect is implemented. When complete, this should guide coding with specific information and guidelines.

DBGraphNav is a tool to facilitate the browsing of relational databases. When integrated into another project, it allows users to view a graphical representation of the relationships between database entries, and to browse them by clicking on a node or connecting line to re-center the graph.

Terminology:
  * End-User - The user of a site with a working DBGraphNav system
  * Integrator - The programmer embedding DBGraphNav within a system
  * User - (usually)see Integrator
  * DBGN - DBGraphNav (this program)

= Current Issues =

This section contains current pressing issues that need to be resolved soon. They should be removed when they are resolved.

= High Level =

== Overview ==
(These are overviews, and are not intended to be particularly specific)

End-User workflow:
  * Presented with an image generated by DBGN
  * Click a feature (a node, a connecting line)
  * Redirected to content relevant to that feature
  * Content usually includes another image from DBGN relevant to the current page

Integrator workflow
  * Install Graphviz and DBGN and ensure that they talk to each other using the test app
  * Identify content with relations to be displayed
  * Generate SQL queries in the chosen language which retrieve data in the appropriate format. May also use views for this. (Format to be specified)
  * Specify the variables which will be passed 
  * Insert queries into config file, inserting variables where appropriate
  * Modify any config variables regarding display options, pruning, etc.
  * Insert code into the application to call DBGN with appropriate variable values, placing the returned image and image map into the code

== External Server ==
The results are designed to be embedded in an iFrame. This allows the server running Graphviz to be physically separate from the page in which the graphs are embedded.

== User Query Interface ==
  * (In setup) Define "types" of data nodes
  * For each type of node, define a query which returns connected results in the format: ||Value||Type||Display Value||
  * The program retrieves a node, then retrieves it's neighbors using the specified queries for that type of node, and then retrieves friends of friends where appropriate, using the data to construct the graph.

== Caching ==
There are three modes for document caching. Each of them is complimented by a cleanup function which removes the oldest items from the cache if it has grown too large.

=== None ===
No caching is done, all queries and images are regenerated on each request.

=== Simple ===
Expires images after a set period if time, serves old images till expiration. Does not cache query results.

=== Complex ===
Caches requests, query results, and images. Serves the old image on first request, then re-runs the query. If results have changed, re-runs graphviz and serves the new image.

== Configuration ==
Configuration will be via XML file, a sample with blank/reasonable default values will be provided.

= Low Level =

== Query Interface ==
Vocabulary for this section:
  * Node - individual meaningful unit of data
  * Edge - connection between nodes
  * Neighbors - the other nodes to which a given node is directly connected
  * Type - Arbitrary string to differentiate between different classes of nodes which require different SQL query strings to determine neighbors. For example, a node of type "person" might return neighbors of type "publication" which might, in turn, return neighbors of type "person". Finding the authors of a paper will require a different search from finding the papers a person has published.

Nodes:
  * Are one individual point of data (value)
  * Have a type
  * Have a neighbors method which queries the database to find related nodes
  * Have a user-defined callback url

Nodes which have the exact same value and type are equivalent. (this is a somewhat built-in limitation from Graphviz, as there is no good way to tell nodes apart)

The return value of a neighbors query is a set of results formatted as follows:
||value||type||display_value||(optional)callback_url|| (optional) display_options ||


== Database Abstraction with MDB2 ==

After looking at a number of DB abstraction layers, I think MDB2 is the appropriate one. The key selling point is that it is currently in active development, as compared to many projects which have become stagnant. I'll be working with the stable version (2.4.1 as of this writing).

  * Pros
    * Easy to use
    * Easy to install
    * Easy to maintain
    * Active development
    * Good future development outlook
  * Cons
    * Requires PEAR
    * Some small performance penalty

== PHP -> Graphviz Connection ==
We will use the Image_Graphviz PEAR library to assist with this.

== Embedding ==
The result of a successful database call will be either an html fragment (no head/body tags) or a complete html document, depending on parameters passed.

The recommended method for embedding is the use of an iframe to hold a true html result. Alternatively, a remote php-include for the fragment provides more flexibility for building the result page at the expense of load times (this is slow because the Graphviz process must terminate before the page can finish loading).

If time permits, an AJAX interface may also be written.


== Data Display Limiting ==
There are two methods of limiting the amount of data displayed in each image. The first is the user-configurable limit on the depth of nodes searched out from the primary node. This will default to a reasonable value (maybe 4). The second method is pruning based on least-connected nodes. This works as follows:
  * After the SQL data is returned, the nodecount is calculated
  * If the nodecount is greater than the maximum (determine experimentally to find out how many nodes produce too much clutter) the number of nodes that need to be pruned is calculated.
  * Nodes are removed from the tree outermost rank first, starting with the least connected nodes. All the nodes of the same connectedness are removed at once, in order to provide repeatable results.
  * Removal Order (Iterate till we have target connections or fewer):
    * Remove 1 from outer ring
    * Remove 1 from outer ring
    * Remove 1 from outer ring - 1
    * Remove 1 from outer ring
    * Remove 1 from outer ring - 1
    * Remove 1 from outer ring - 2
    * etc.
    * NOTE: We never allow a graph to have fewer than 2 nodes (we favor being over the max than under it). This rule could come into play with a node which is heavily connected, but whose neighbors are not at all connected.

== Configuration ==
Configuration is via XML file. Template file will be included with reasonable default values. There will be an "apply configuration" php script that will parse the config file into a php array, serialize it, and write it back out to a php file (so as to avoid the overhead of parsing the xml file every time the script is run).
