#summary This is the core Design Document for the project.

= Introduction =

This document contains both a project overview and specific information regarding how each aspect is implemented. When complete, this should guide coding with specific information and guidelines.

DBGraphNav is a tool to facilitate the browsing of relational databases. When integrated into another project, it allows users to view a graphical representation of the relationships between database entries, and to browse them by clicking on a node or connecting line to re-center the graph.

Terminology:
  * End-User - The user of a site with a working DBGraphNav system
  * Integrator - The programmer embedding DBGraphNav within a system
  * User - (usually)see Integrator
  * DBGN - DBGraphNav (this program)

= Current Issues =

This section contains current pressing issues that need to be resolved soon. They should be removed when they are resolved.

= High Level =

== Overview ==
(These are overviews, and are not intended to be particularly specific)
End-User workflow:
  * Presented with an image generated by DBGN
  * Click a feature (a node, a connecting line)
  * Redirected to content relevent to that feature
  * Content usually includes another image from DBGN relevent to the current page

Integrator workflow
  * Install Graphviz and DBGN and ensure that they talk to each other using the test app
  * Identify content with relations to be displayed
  * Generate SQL queries in the chosen language which retrieve data in the appropriate format. May also use views for this. (Format to be specified)
  * Specify the variables which will be passed 
  * Insert queries into config file, inserting variables where appropriate
  * Modify any config variables regarding display options, pruning, etc.
  * Insert code into the application to call DBGN with appropriate variable values, placing the returned image and image map into the code
  * 


== User Query Interface ==


= Low Level =

== Database Abstraction with MDB2 ==

After looking at a number of DB abstraction layers, I think MDB2 is the appropriate one. The key selling point is that it is currently in active development, as compared to many projects which have become stagnant. I'll be working with the stable version (2.4.1 as of this writing).

  * Pros
    * Easy to use
    * Easy to install
    * Easy to maintain
    * Active development
    * Good future development outlook
  * Cons
    * Requires PEAR
    * Some small performance penalty



== PHP -> Graphviz Connection ==

== Embedding ==
The result of a successful database call will be either an html fragment (no head/body tags) or a complete html document, depending on parameters passed.

The recommended method for embedding is the use of an iframe to hold a true html result. Alternatively, a remote php-include for the fragment provides more flexibility for building the result page at the expense of load times (this is slow because the Graphviz process must terminate before the page can finish loading).

If time permits, an AJAX interface may also be written.



